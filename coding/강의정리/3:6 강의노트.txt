3/6 강의노트

1. 객체지향프로그래밍(Object Oriented Programming_OOP)
   - 객체를 만드는 것, 하나의 객체 안에는 그 객체가 가지고 있는 속성(기능)과 연관되어 있는 변수,
     메소드를 연관성이 없는 다른 로직과 구분해주는 역할을 해줌
   - 부품화 : 다른 로직에서 일종의 부품으로서 재활용이 가능함
   - 은닉화/캡슐화 : 내부의 동작방법을 단단한 케이스(객체) 안에 숨기고, 사용자에게는 그 부품의
                 사용방법(메소드)만을 노출하는 것
   - 인터페이스 : 서로 상호교환이 가능해야 함

2. 객체지향
   - Prototype-based programming : javascript의 특성
   - 객체 : 서로 연관된 변수(property)&함수(method)를 그룹핑한 그릇
   - 생성자(constructor) : 객체를 만드는 역할을 하는 함수
                      --> 함수에 'new'를 붙히면 객체가 됨
                        - 객체에 대해 '초기화(init)'를 함

3. 전역객체 : 모든 객체는 전역객체의 프로퍼티(변수)다.
   - ex) function func() {
       		alert(“Hello?”);
	}
        선언 후 func(); 을 입력하게 되면
        경고창으로 Hello?가 뜨게됨
        이 때 window.func();를 써도 같은 결과가 나옴

4. this : 함수내에서 '함수호출맥락(context)'을 의미. 즉 고정되어 있지 않고 상황에 따라 달라짐
          함수를 어떻게 호출하느냐에 따라서 this가 가르키는 대상이 달라짐
          ex) function func(){
		if(window === this) {
			console.log("window === this");
		}
	      } func(); ===> "window === this" 출력됨
                --->이는 함수 내에서 this라는 변수 안에 담겨 있는 값이 window를 의미함
   - 객체의 소속인 method의 this는 그 객체를 가르킴
   - 생성자 안에서의 this는 그 생성자가 만든 객체를 가르킴

5. apply / call : 함수의 method, this의 값 제어 가능
   - function sum(x,y){return x+y;}   와    ->여기서 sum은 객체
     var sum2 = new Function('x','y','return x+y');  의 값은 같다.
					|->함수의 본문 부분이 됨
   - 객체(주인-master)는 메소드(노예-slave)를 포함한다

6. 상속(inheritance) : 

7. 원형(Prototype) : 함수인 생성자를 new를 사용하여 호출할 경우, new로 인해 생성자가 되고, 
                    새로운 객체를 만들어서 넣게됨
   - prototype chain : prototype이 서로 연결되어있음
                       prototype에 저장된 속성들은 생성자들을 통해 객체가 만들어질 때 
                       그 객체에 연결되기 때문에 부모객체의 값을 상속받게 됨

8. 표준 내장 객체 : js가 기본적으로 가지고 있는 객체들
		js의 내장객체 - Object / Function / Array / String / Boolean
                	     Number / Math / Date / RegExp

9. Object : 객체의 가장 기본적인 형태(최초의 조상), 아무것도 상속받지 않는 순수한 객체.
            js에서 값을 저장하는 기본적인 단위로 사용됨
   - object. ______ : 인자로 어떤 값을 받아서 처리, object.____=function(){}
   - object.prototype.______ : new를 통해 어떤 객체를 만들어서 그 객체를 담고 있는 
                               식별자.____
   - 확장 : hasOwnProperty - 모든 객체가 인자로 전달한 값을 변수로 갖고 있는지 확인 후 출력

10. 데이터 타입 : 복제 - 두개의 데이터는 연결되어 있지 않은 별개의 데이터이기 때문에 한개의 데이터의 정보가 
		     바뀌더라도 나머지 데이터에 영향을 끼치지 않음
	       참조 - 두개의 데이터가 연결되어서 데이터의 정보가 바뀌면 같은 값을 가지게 됨
		====> 객체는 같은 데이터를, 원시데이터는 별개의 데이터가 생성되는 것

* 문자열, 숫자, 블리언은 객체처럼 사용가능하지만 실제로는 원시타입
  ->wrapper객체로 감싸져있기 때문에 객체처럼 사용 가능한 것